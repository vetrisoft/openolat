<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
  http://www.springframework.org/schema/beans 
  http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
  http://www.springframework.org/schema/context 
  http://www.springframework.org/schema/context/spring-context-3.0.xsd">

<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	<property name="locations">
		<list>
			<value>classpath:serviceconfig/olat.properties</value>
			<value>classpath:olat.local.properties</value>
			<value>classpath:maven.build.properties</value>
		</list>
	</property>
</bean>

			<bean id ="webappHelper" class="org.olat.system.commons.WebappHelper"  p:nodeId="${node.id}" init-method="init" destroy-method="destroy">
				<!-- relative path from the webapp directory to the source directory (only relavant for development/debuging mode) -->
				<property name="fullPathToSrc" value="${project.build.home.directory}/src/main/java" />
				<property name="srcViewHgRepo" value="${src.view.hg.repo}" />
				<property name="instanceId" value="${instance.id}"/>
<!--				<property name="nodeId" value="${node.id}"/>-->
				<property name="userDataRoot" value="${userdata.dir}"/>
				<property name="mailConfig">
					<map>
						<entry key="mailhost" value="${smtp.host}"/>
						<entry key="mailTimeout" value="5000"/> <!-- timeout in milliseconds -->
						<entry key="smtpUser" value="${smtp.user}"/>
						<entry key="smtpPwd" value="${smtp.pwd}"/>
						<entry key="sslEnabled" value="${smtp.sslEnabled}"/>
						<entry key="sslCheckCertificate" value="${smtp.sslCheckCertificate}"/>
						<entry key="mailSupport" value="${supportemail}"/>
						<entry key="mailAttachmentMaxSize" value="${mail.attachment.maxsize}"/>
					</map>
				</property>
				<property name="defaultCharset" value="${defaultcharset}" />
				<property name="version" value="${build.version}" />
				<property name="applicationName" value="${application.name}" />
			</bean>

			<bean class="org.olat.system.commons.Settings"  depends-on="webappHelper"  >
<!-- 				<property name="persistedProperties"> -->
<!-- 					<bean name="settingsSetPersistedProperties" class="org.olat.system.commons.configuration.PersistedProperties"  -->
<!-- 					scope="prototype" init-method="init" destroy-method="destroy"> -->
<!-- 						<constructor-arg ref="org.olat.system.commons.Settings" /> -->
<!-- 					</bean> -->
<!-- 				</property> -->
				<!-- OLAT Tomcat server configuration parameters. This is used e.g. to assemble absolute URIS where needed. -->
				<property name="serverconfig">
					<map>
						<entry key="server_name" value="REPLACE" />
						<entry key="server_fqdn" value="${server.domainname}" />
						<entry key="server_securePort" value="${server.port.ssl}" />
						<entry key="server_insecurePort" value="${server.port}" />
						<!-- Static global-mappers files (path /g/**) can be delivered directly from apache 
				     		 olat-application must copy all needed static files from classes/core to apache
				     		 static directory (static/g/..) . 
				     		 Apache and mod_jk must be configurated to filter '/g/**' path -->
						<entry key="server_modjk_enabled" value="${server.modjk.enabled}" />
						<entry key="server_core_jar_name" value="olatcore-1.0-SNAPSHOT.jar" />
					</map>
				</property>
				<property name="sessionTimeout" value="${server.session.timeout}" />		
				<!-- true enable debug mode, not for production mode but for productive hours ;) -->
				<property name="debug" value="${olat.debug}" />
				<!-- if readOnlyDebug, then no file changes can be made in the debug mode -->
				<property name="readOnlyDebug" value="false" />
				<!-- 
					For Performance and/or Functional Tests. 
					if allowLoadtestMode is set to true, it is possible to switch a session to  loadtest mode
					using the url parameter ?loadtest  and ?noloadtest even without logging in.
					Thus the same urls can be reused over and over again, which is needed for tools like JMeter or such.
					- Not to be used for productive mode! (no double post checks, asynchronous inline rendering does not work etc.)-	 
				-->
				<property name="allowLoadtestMode" value="${allow.loadtest.mode}" />
				<!-- true when ajax should be enabled system-wide (but for non-supported browsers the system will automatically fallback to web 1.0 mode) -->	
				<property name="ajaxGloballyOn" value="true" />
				<!-- List of user agents that should be served using the web 1.0 mode (no ajax DOM replacement).
				 	A user agent that matches against one of the regular expressions below will be blocked.					
				-->
				<property name="ajaxBlacklistedUserAgents">
					<!-- List of user agents that are blocked for the AJAX mode. A user agent that matches against one of the 
						regular expressions below will be served in web 1.0 mode  -->
					<list>
						<value>.*WebKit/5[01].*</value> 		<!-- older than safari 3.0 -->
						<value>.*MSIE [2345].*</value>			<!-- older than IE 6.0 -->
						<value>.*Firefox/(1\.).*</value>		<!-- older than FF 2.0  -->
						<value>.*Opera/[45678].*</value>		<!-- older than Opera 9 -->
						<value>.*Gecko/200[0123456].*</value>	<!-- Gecko engine older than 2006  -->
						<value>.*Lynx.*</value>					<!-- Lynx console browser (no js) -->
					</list>
				</property>
				<!-- 
					Set the system theme here. Make sure the directory webapp/WEB-INF/static/themes/YOURTHEME exists. 
					This is only the default value in case no user configuration is found. Use the administration GUI to
					Set a specific theme.
				-->				
				<property name="guiThemeIdentifyer" value="${layout.theme}" />				
				
				<property name="version" value="${build.version}" />
				<property name="applicationName" value="${application.name}" />
				<property name="clusterMode" value="${cluster.mode}"/>
				<property name="nodeId" value="${node.id}"/>
			</bean>


</beans>
