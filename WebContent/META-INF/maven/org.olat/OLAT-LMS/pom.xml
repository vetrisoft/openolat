<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://maven.apache.org/POM/4.0.0">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.olat</groupId>

  <artifactId>OLAT-LMS</artifactId>

  <version>7.8.2.0</version>

  <packaging>war</packaging>

  <name>OLAT LMS</name>

  <url>http://www.olat.org/</url>

  <description>
  Welcome to the OLAT (Online Learning And Training) Developer Project Site.  This site
  contains materials chiefly of concern to developers (e.g., unit testing and SCA output etc.)
  and is rebuilt periodically on a regular basis.  The site structure is divided between
  project information (e.g., infrastructure, mailing lists, repositories etc.) and reports
  (e.g., unit testing, SCAs etc.)

  The development of OLAT itself started in 1999 at the University of Zürich, Switzerland,
  where it is the strategic learning management system.  For further information see our main project website.
  </description>

  <organization>
    <name>Online Learning And Training (University of Zürich)</name>

    <url>http://www.olat.org/</url>
  </organization>

  <licenses>
    <license>
      <name>Apache 2.0 Open Source License</name>

      <url>http://www.apache.org/licenses/LICENSE-2.0</url>

      <distribution>manual</distribution>

      <comments>
		OLAT is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
		</comments>
    </license>
  </licenses>

  <developers>
  </developers>

  <distributionManagement>
    <repository>
      <id>releases</id>

      <name>OLAT Internal Nexus Release Repository</name>

      <url>http://repo.olat.uzh.ch/nexus/content/repositories/releases</url>
    </repository>

    <snapshotRepository>
      <id>snapshots</id>

      <name>OLAT Internal Nexus Snapshot Repository</name>

      <url>http://repo.olat.uzh.ch/nexus/content/repositories/snapshots</url>
    </snapshotRepository>
  </distributionManagement>

  <issueManagement>
    <system>JIRA</system>

    <url>http://bugs.olat.org/jira/secure/Dashboard.jspa</url>
  </issueManagement>

  <ciManagement>
    <system>Hudson</system>

    <url>http://hudson.olat.uzh.ch/hudson</url>

    <!-- notifiers are not required -->
  </ciManagement>

  <scm>
    <connection>scm:hg:http://hg.olat.org/repos</connection>

    <developerConnection>scm:hg:http://hg.olat.org/repos</developerConnection>

    <url>http://hg.olat.org/repos</url>
  </scm>

  <mailingLists>
    <mailingList>
      <name>olat-announce</name>

      <subscribe>https://lists.uzh.ch/lists.olat.org/sympa/subscribe/olat-announce</subscribe>

      <unsubscribe>https://lists.uzh.ch/lists.olat.org/sympa/sigrequest/olat-announce</unsubscribe>

      <post>olat-announce@lists.olat.org</post>

      <archive>https://lists.uzh.ch/lists.olat.org/sympa/info/olat-announce</archive>
    </mailingList>

    <mailingList>
      <name>olat-users</name>

      <subscribe>https://lists.uzh.ch/lists.olat.org/sympa/subscribe/olat-users</subscribe>

      <unsubscribe>https://lists.uzh.ch/lists.olat.org/sympa/sigrequest/olat-users</unsubscribe>

      <post>olat-users@lists.olat.org</post>

      <archive>https://lists.uzh.ch/lists.olat.org/sympa/info/olat-users</archive>
    </mailingList>

    <mailingList>
      <name>olat-developers</name>

      <subscribe>https://lists.uzh.ch/lists.olat.org/sympa/subscribe/olat-developers</subscribe>

      <unsubscribe>https://lists.uzh.ch/lists.olat.org/sympa/sigrequest/olat-developers</unsubscribe>

      <post>olat-developers@lists.olat.org</post>

      <archive>https://lists.uzh.ch/lists.olat.org/sympa/info/olat-developers</archive>
    </mailingList>

    <mailingList>
      <name>olat-translators</name>

      <subscribe>https://lists.uzh.ch/lists.olat.org/sympa/subscribe/olat-translators</subscribe>

      <unsubscribe>https://lists.uzh.ch/lists.olat.org/sympa/sigrequest/olat-translators</unsubscribe>

      <post>olat-translators@lists.olat.org</post>

      <archive>https://lists.uzh.ch/lists.olat.org/sympa/info/olat-translators</archive>
    </mailingList>

    <mailingList>
      <name>olat-usability</name>

      <subscribe>https://lists.uzh.ch/lists.olat.org/sympa/subscribe/olat-usability</subscribe>

      <unsubscribe>https://lists.uzh.ch/lists.olat.org/sympa/sigrequest/olat-usability</unsubscribe>

      <post>olat-usability@lists.olat.org</post>

      <archive>https://lists.uzh.ch/lists.olat.org/sympa/info/olat-usability</archive>
    </mailingList>
  </mailingLists>

  <properties>
    <!-- Unless otherwise explicitly stated the character encoding for all resources 
		(e.g., source, test etc.) will be UTF-8. This can be overriden at the plugin 
		level if necessary. -->

    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!-- organize versions -->

    <org.springframework.version>3.0.5.RELEASE</org.springframework.version>

    <aspectj.version>1.6.10</aspectj.version>

    <org.hibernate.version>3.3.2.GA</org.hibernate.version>
    <org.hibernate.annotations.version>3.4.0.GA</org.hibernate.annotations.version>
    
    <!-- properties for testing and QA -->

    <!-- by default the unittests are executed but not the Integration Tests (Feb 2012).
         Use appropriate profiles and properties on the command line -->

    <skipTests>false</skipTests>

    <skipITs>true</skipITs>

    <!-- ********* START Section TESTING.COMMONS with properties valid for integration and acceptance testing -->

    <!-- properties to define the testing environment
          values: hsql / mysql (default) -->

    <test.env>mysql</test.env>

    <!-- maven properties duplicates of olat.local.properties 
         to distinguish multiple single and cluster olat instances
         on a single executing host (e.g. default values for localhost and software engineer) -->

    <test.env.db.name>olattest</test.env.db.name>

    <test.env.db.user>olat</test.env.db.user>

    <test.env.db.pass>olat</test.env.db.pass>

	<!-- both -Dtest.env.it.test.include=x.java and -Dtest.env.it.new.test.include=*y.java must be specified with "mvn test -Dwith-mysql", in case overwrite the defaults is wanted -->
    <test.env.it.test.include>AllITCases.java</test.env.it.test.include>
    <test.env.it.new.test.include>*ITCaseNew*.java</test.env.it.new.test.include>

    <test.env.db.4mvnplugin>olat</test.env.db.4mvnplugin>

    <test.env.db.host.port>3306</test.env.db.host.port>

    <test.env.db.host>localhost</test.env.db.host>

    <test.env.db.hibernate.ddl.auto>create</test.env.db.hibernate.ddl.auto>

    <test.env.instance.id>myolat</test.env.instance.id>

    <test.env.jms.broker.port>61616</test.env.jms.broker.port>

    <test.env.jmx.rmi.port.0>3000</test.env.jmx.rmi.port.0>

    <test.env.jmx.rmi.port.1>3001</test.env.jmx.rmi.port.1>

    <test.env.jmx.rmi.port.2>3002</test.env.jmx.rmi.port.2>

    <!-- value ......... consequence -->
    <!-- testing ....... no emails are sent, but olat mail abstraction returns a "message sent ok" code -->
    <!-- disabled ...... no emails are sent -->
    <!-- <valid smtp> .. emails are sent -->
    <test.env.smtp.host>testing</test.env.smtp.host>

    <!-- ******* END Section TESTING.COMMONS -->

    <!-- ******* START Section TESTING.ACCEPTANCE.SELENIUM -->

    <!-- the activemq config directory must be overridden on the commandline by windows user due an issue in the
         activemq maven plugin the value should be the directory where the pom.xml is 
         with FORWARDSLASHES insted of backslashes!! -->

    <test.env.cluster.activemq.configdir>${basedir}/cargo</test.env.cluster.activemq.configdir>

    <test.env.testngfile>testng.xml</test.env.testngfile>

    <test.env.debuggingtestngfile>debugging.xml</test.env.debuggingtestngfile>

    <test.env.fragileexiletestngfile>fragileexile.xml</test.env.fragileexiletestngfile>

    <!-- this version is defined by the dependency <groupId>org.olat.testutils</groupId>   <artifactId>zipped-tomcat6x</artifactId> and the herein zipped tomcat installation -->

    <container.tomcat.version>6.0.32</container.tomcat.version>

    <!-- install dir is important for the -Pinstall-tomcats profile.
         These few lines define the default tomcat installation variables for installation and running a local tomcat cluster.
         If you want to reuse an existing tomcat installation, set the container.tomcat.*.home instead. -->

    <container.tomcat.one.install.dir>${basedir}/cargo/tomcat/one/</container.tomcat.one.install.dir>

    <container.tomcat.one.home>${container.tomcat.one.install.dir}/apache-tomcat-${container.tomcat.version}</container.tomcat.one.home>

    <!-- The port.part is used in several places to create cluster which follows the template:
         servlet port 8181
         administration ports 8109, 8105
         go to the src/test/profile/cluster/tomcat*/conf and lib/ to see the actual replacements.-->

    <container.tomcat.one.port.part>81</container.tomcat.one.port.part>

    <container.tomcat.one.port>${container.tomcat.one.port.part}${container.tomcat.one.port.part}</container.tomcat.one.port>

    <container.tomcat.one.jvmargs />

    <container.tomcat.two.install.dir>${basedir}/cargo/tomcat/two/</container.tomcat.two.install.dir>

    <container.tomcat.two.home>${container.tomcat.two.install.dir}/apache-tomcat-${container.tomcat.version}</container.tomcat.two.home>

    <container.tomcat.two.port.part>82</container.tomcat.two.port.part>

    <container.tomcat.two.port>${container.tomcat.two.port.part}${container.tomcat.two.port.part}</container.tomcat.two.port>

    <container.tomcat.two.jvmargs />

    <!-- the selenium client version which is also by the maven-selenium-plugin, 
        using the latest selenium a.k.a selenium 2.0 needs a migration of the tests and maven setup. -->

    <selenium-client.version>1.0.2</selenium-client.version>

    <!-- the selenium configuration needed to configure the tomcats, selenium context and maven failsafe (testng) runner.
         The tomcat knows which user to add just for selenium testcases, see additionalUserContext.xml
         The selenium context is defined in the defaultcontext.xml and has variable replacements as specified above.
         The failsafe plugin uses the testng.xml by default. The file can be specified on the console with the -Dselenium.config.file=<your file> property
         The selenium configuration can be replaced as a whole by specifing a place where all the config files resides with the -Dselenium.config.files.path="<your-path-without-special-chars> property." -->

    <selenium.config.files.path>src/test/profile/selenium/config</selenium.config.files.path>

    <!-- proposal for setting the firefox executable path, which could be used as variable in the defaultcontext.xml
         important if using a firefox script which does not allow to kill the firefoxes after usage. (e.g. Suse 64Bit)-->

    <selenium.config.file>defaultcontext.xml</selenium.config.file>

    <test.env.selenium.port>4444</test.env.selenium.port>

    <!-- properties for debugging -->
    <!-- for debugging reason it may be helpful to set this with 
    -Dcargo.container.wait=true to see if the container is up and running for the seleniumtests. -->
    <cargo.container.wait>false</cargo.container.wait>

    <cargo.container.timeout>300000</cargo.container.timeout>
    <!-- ******* END Section TESTING.ACCEPTANCE.SELENIUM -->
  </properties>

  <profiles>
    <profile>
      <id>aop</id>
      <!-- aop is not enabled by default as it confuses eclipse compiler: run "mvn -Paop compile" to activate -->

      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>

            <artifactId>aspectj-maven-plugin</artifactId>

            <version>1.0</version>

            <dependencies>
              <dependency>
                <groupId>org.aspectj</groupId>

                <artifactId>aspectjrt</artifactId>

                <version>${aspectj.version}</version>
              </dependency>

              <dependency>
                <groupId>org.aspectj</groupId>

                <artifactId>aspectjtools</artifactId>

                <version>${aspectj.version}</version>
              </dependency>
            </dependencies>

            <executions>
              <execution>
                <goals>
                  <goal>compile</goal>

                  <!-- uncomment when system layer tests are clean -->

                  <!-- <goal>test-compile</goal> -->
                </goals>
              </execution>
            </executions>

            <configuration>
              <excludes>
                <exclude>**/LMSLayerArchitecture.aj</exclude>
              </excludes>

              <outxml>true</outxml>

              <aspectLibraries>
                <aspectLibrary>
                  <!-- includes already compiled aspects from third party libraries -->

                  <groupId>org.springframework</groupId>

                  <artifactId>spring-aspects</artifactId>
                </aspectLibrary>
              </aspectLibraries>

              <source>1.6</source>

              <target>1.6</target>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>linux</id>
      <!-- this serves as an example of how to run something whenever the os familiy matches unix (includes linux as well) -->

      <activation>
        <os>
          <family>unix</family>
        </os>
      </activation>

      <properties>
        <os.property.file>linux.properties</os.property.file>
      </properties>
    </profile>

    <profile>
      <id>windows</id>
      <!-- this serves as an example of how to run something whenever the os familiy matches windows -->

      <activation>
        <os>
          <family>windows</family>
        </os>
      </activation>

      <properties>
        <os.property.file>win.properties</os.property.file>
      </properties>
    </profile>
    
    <profile>
      <id>ngtests</id>

      <activation>
        <property>
          <name>ngtests-with-mysql</name>
        </property>
      </activation>

      <properties>
        <skipTests>false</skipTests>

        <skipITs>false</skipITs>

        <testFailureIgnore>false</testFailureIgnore>

        <test.env.db.hibernate.ddl.auto />

        <test.env>mysql</test.env>
      </properties>

      <build>
        <plugins>
          <plugin>
            <!-- Documentation: http://maven.apache.org/plugins/maven-surefire-plugin/ -->

            <groupId>org.apache.maven.plugins</groupId>

            <artifactId>maven-surefire-plugin</artifactId>
            <version>2.8.1</version>
            <configuration>
              <testNGArtifactName>org.testng:testng</testNGArtifactName>
              
              <suiteXmlFiles>
                <suiteXmlFile>src/test/testng_concurrency.xml</suiteXmlFile>
              </suiteXmlFiles>
              
            </configuration>
      
            <executions>
              <execution>
                <id>ngtests</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>test</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <artifactId>maven-resources-plugin</artifactId>

            <version>2.4.3</version>

            <executions>
              <execution>
                <id>copy-resources-4-mysqlunittests</id>

                <!-- hook in to copy maven.build.properties to allow test and integration-test phase run properly -->

                <phase>generate-test-resources</phase>

                <goals>
                  <goal>copy-resources</goal>
                </goals>

                <configuration>
                  <outputDirectory>${basedir}/target/test-classes</outputDirectory>

                  <resources>
                    <resource>
                      <!-- place resources you like to get filtered an copied -->

                      <directory>src/test/profile/${test.env}</directory>

                      <includes>
                        <include>olat.local.properties</include>
                      </includes>

                      <filtering>true</filtering>
                    </resource>

                    <resource>
                      <!-- place resources you like to get filtered an copied -->

                      <directory>src/main/resources/database/mysql</directory>

                      <includes>
                        <include>setupDatabase.sql</include>
                      </includes>

                      <filtering>true</filtering>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    
    <profile>
      <id>mysqlunittests</id>

      <activation>
        <property>
          <name>with-mysql</name>
        </property>
      </activation>

      <properties>
        <skipTests>false</skipTests>

        <skipITs>false</skipITs>

        <testFailureIgnore>false</testFailureIgnore>

        <test.env.db.hibernate.ddl.auto />

        <test.env>mysql</test.env>
      </properties>

      <build>
        <plugins>
          <plugin>
            <!-- Documentation: http://maven.apache.org/plugins/maven-surefire-plugin/ -->

            <groupId>org.apache.maven.plugins</groupId>

            <artifactId>maven-surefire-plugin</artifactId>

            <version>2.8.1</version>

            <executions>
              <execution>
                <id>mysql-integrationtests</id>

                <!-- hook in to copy maven.build.properties to allow test and integration-test phase run properly -->

                <phase>test</phase>

                <goals>
                  <goal>test</goal>
                </goals>

                <configuration>
                  <argLine>-Xmx512m -Xms512m</argLine>

                  <testNGArtifactName>none:none</testNGArtifactName>

                  <includes>
                    <include>**/${test.env.it.test.include}</include>

                    <include>**/${test.env.it.new.test.include}</include>
                  </includes>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <artifactId>maven-resources-plugin</artifactId>

            <version>2.4.3</version>

            <executions>
              <execution>
                <id>copy-resources-4-mysqlunittests</id>

                <!-- hook in to copy maven.build.properties to allow test and integration-test phase run properly -->

                <phase>generate-test-resources</phase>

                <goals>
                  <goal>copy-resources</goal>
                </goals>

                <configuration>
                  <outputDirectory>${basedir}/target/test-classes</outputDirectory>

                  <resources>
                    <resource>
                      <!-- place resources you like to get filtered an copied -->

                      <directory>src/test/profile/${test.env}</directory>

                      <includes>
                        <include>olat.local.properties</include>
                      </includes>

                      <filtering>true</filtering>
                    </resource>

                    <resource>
                      <!-- place resources you like to get filtered an copied -->

                      <directory>src/main/resources/database/mysql</directory>

                      <includes>
                        <include>setupDatabase.sql</include>
                      </includes>

                      <filtering>true</filtering>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>clean-mysql-dbsetup</id>

      <activation>
        <property>
          <name>clean-mysql</name>
        </property>
      </activation>

      <build>
        <plugins>
          <plugin>
            <artifactId>maven-resources-plugin</artifactId>

            <executions>
              <execution>
                <id>copy-resources-4-clean-mysql-dbsetup</id>

                <phase>generate-test-resources</phase>

                <goals>
                  <goal>copy-resources</goal>
                </goals>

                <configuration>
                  <outputDirectory>${basedir}/target/test-classes</outputDirectory>

                  <resources>
                    <resource>
                      <!-- place resources you like to get filtered an copied -->

                      <directory>src/main/resources/database/mysql</directory>

                      <includes>
                        <include>setupDatabase.sql</include>
                      </includes>

                      <filtering>true</filtering>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.mojo</groupId>

            <artifactId>sql-maven-plugin</artifactId>

            <version>1.4</version>

            <dependencies>
              <dependency>
                <!-- DO NOT UPDATE! -->

                <!-- Due to our special setup where we use the jdbc driver to convert 
				          from utf-8 to iso we cannot update this lib at the moment. -->

                <groupId>mysql</groupId>

                <artifactId>mysql-connector-java</artifactId>

                <version>5.0.8</version>
              </dependency>
            </dependencies>

            <!-- common configuration shared by all executions -->

            <configuration>
              <driver>com.mysql.jdbc.Driver</driver>

              <url>jdbc:mysql://${test.env.db.host}:${test.env.db.host.port}/${test.env.db.name}</url>

              <username>${test.env.db.user}</username>

              <password>${test.env.db.pass}</password>

              <!-- You can comment out username/password configurations and
                   have maven to look them up in your settings.xml using ${settingsKey}
              
              <settingsKey>sensibleKey</settingsKey>-->

              <!--all executions are ignored if -Dmaven.test.skip=true-->

              <skip>${maven.test.skip}</skip>
            </configuration>

            <executions>
              <execution>
                <id>drop-db-before-test</id>

                <phase>process-test-resources</phase>

                <goals>
                  <goal>execute</goal>
                </goals>

                <configuration>
                  <!-- need another database to drop the targeted one -->

                  <url>jdbc:mysql://${test.env.db.host}:${test.env.db.host.port}/${test.env.db.4mvnplugin}</url>

                  <autocommit>true</autocommit>

                  <sqlCommand>drop database ${test.env.db.name}</sqlCommand>

                  <!-- ignore error when database is not avaiable -->

                  <onError>continue</onError>
                </configuration>
              </execution>

              <execution>
                <id>create-db</id>

                <phase>process-test-resources</phase>

                <goals>
                  <goal>execute</goal>
                </goals>

                <configuration>
                  <url>jdbc:mysql://${test.env.db.host}:${test.env.db.host.port}/${test.env.db.4mvnplugin}</url>

                  <!-- no transaction -->

                  <autocommit>true</autocommit>

                  <sqlCommand>create database ${test.env.db.name}</sqlCommand>
                </configuration>
              </execution>

              <execution>
                <id>create-schema</id>

                <phase>process-test-resources</phase>

                <goals>
                  <goal>execute</goal>
                </goals>

                <configuration>
                  <autocommit>true</autocommit>

                  <srcFiles>
                    <srcFile>target/test-classes/setupDatabase.sql</srcFile>
                  </srcFiles>
                </configuration>
              </execution>

              <!-- drop db after test -->

              <execution>
                <id>drop-db-after-test</id>

                <!-- there is no post-test phase, the next phase after "test" is "prepare-package"
                     for integration tests running against mysql generated via setupDatabase.sql there is need
                     to bind a similar drop/create/schema/drop to pre-integration-test and post-integration-test -->

                <phase>prepare-package</phase>

                <goals>
                  <goal>execute</goal>
                </goals>

                <configuration>
                  <autocommit>true</autocommit>

                  <sqlCommand>drop database ${test.env.db.name}</sqlCommand>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>install-tomcats</id>
      <!-- activate this profile to unzip two tomcats instances for cluster setup, which are the configured and used with profile seleniumtests
      bind to phase initialize and execute goal unpack
      ... initialize is an early phase, so that unpacking does not overwrite resources copied over to the tomcats. -->

      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>

            <artifactId>maven-dependency-plugin</artifactId>

            <version>2.2</version>

            <executions>
              <execution>
                <id>install-tomcat-one</id>

                <phase>validate</phase>

                <goals>
                  <goal>unpack
                  </goal>
                </goals>

                <configuration>
                  <artifactItems>
                    <artifactItem>
                      <groupId>org.olat.testutils</groupId>

                      <artifactId>zipped-tomcat6x</artifactId>

                      <version>1.0</version>

                      <type>zip</type>

                      <overWrite>true</overWrite>

                      <outputDirectory>${container.tomcat.one.install.dir}</outputDirectory>
                    </artifactItem>
                  </artifactItems>

                  <!-- other configurations here -->
                </configuration>
              </execution>

              <execution>
                <id>install-tomcat-two</id>

                <!-- bind to initialize, that tomcats are unpacked before resources are copied over -->

                <phase>validate</phase>

                <goals>
                  <goal>unpack</goal>
                </goals>

                <configuration>
                  <artifactItems>
                    <artifactItem>
                      <groupId>org.olat.testutils</groupId>

                      <artifactId>zipped-tomcat6x</artifactId>

                      <version>1.0</version>

                      <type>zip</type>

                      <overWrite>true</overWrite>

                      <outputDirectory>${container.tomcat.two.install.dir}</outputDirectory>
                    </artifactItem>
                  </artifactItems>

                  <!-- other configurations here -->
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>debug</id>

      <properties>
        <skipTests>true</skipTests>

        <skipITs>true</skipITs>

        <cargo.container.wait>true</cargo.container.wait>

        <container.tomcat.one.jvmargs>"-Xdebug"
        "-Xrunjdwp:transport=dt_socket,address=4646,server=y,suspend=n"</container.tomcat.one.jvmargs>

        <container.tomcat.two.jvmargs>"-Xdebug"
        "-Xrunjdwp:transport=dt_socket,address=5656,server=y,suspend=n"</container.tomcat.two.jvmargs>
      </properties>
    </profile>

    <profile>
      <id>xvfb</id>

      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>

            <artifactId>selenium-maven-plugin</artifactId>

            <version>1.1</version>

            <executions>
              <execution>
                <id>start-xvfb</id>

                <phase>pre-integration-test</phase>

                <goals>
                  <goal>xvfb</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>stop-selenium</id>
      <!-- stop the selenium server which was started during mvn verify -Dwith-selenium -Pdebug
      -->
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>selenium-maven-plugin</artifactId>
            <version>1.1</version>
            <executions>
              <execution>
                <id>stop4restart-selenium-server</id>
                <phase>process-test-sources</phase><!-- process-test-sources -->
                <goals>
                  <goal>stop-server</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>


    <profile>
      <id>restartselenium</id>
      <!-- reconfigure and start selenium server
      -->
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-clean-plugin</artifactId>
            <version>2.4.1</version>
            <executions>
              <execution>
                <id>clean-selenium-files-for-restart</id>
                <phase>initialize</phase>
                <goals>
                  <goal>
		     clean
		  </goal>
                </goals>
                <configuration>
                  <excludeDefaultDirectories>true</excludeDefaultDirectories>
                  <filesets>
                    <fileset>
                      <directory>${basedir}/target/</directory>
                      <includes>
                        <include>generated_combined_olat-ui-map.xml</include>
                        <include>olat-ui-map.js</include>
                        <include>olat-user-extensions.js</include>
                      </includes>
                    </fileset>
                    <fileset>
                      <directory>${basedir}/target/selenium/</directory>
                      <includes>
                        <include>user-extensions.js</include>
                      </includes>
                    </fileset>
                  </filesets>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>
            <version>1.6</version>
            <executions>
              <execution>
                <id>reconfigure-selenium-server</id>
                <phase>generate-test-resources</phase><!-- generate-test-resources -->
                <configuration>
                  <target unless="maven.test.skip">
                    <echo message="Generate ../target/olat-user-extensions.js for Seleniumserverstart"/>
                    <xslt in="${basedir}/src/test/profile/selenium/ui-map/olat-ui-map.xml" out="${basedir}/target/generated_combined_olat-ui-map.xml" style="${basedir}/src/test/profile/selenium/ui-map/resources/resolve_includes.xsl"/>
                    <xslt in="${basedir}/target/generated_combined_olat-ui-map.xml" out="${basedir}/target/olat-ui-map.js" style="${basedir}/src/test/profile/selenium/ui-map/resources/gen_olat-ui-map.xsl">
										</xslt>
                    <concat destfile="${basedir}/target/olat-user-extensions.js">
                      <fileset file="${basedir}/target/olat-ui-map.js"/>
                      <fileset file="${basedir}/src/test/profile/selenium/ui-map/resources/rollups.js"/>
                    </concat>
                  </target>
                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>selenium-maven-plugin</artifactId>
            <version>1.1</version>
            <executions>
              <execution>
                <id>restart-selenium-server</id>
                <phase>process-test-resources</phase>
                <goals>
                  <goal>start-server</goal>
                </goals>
                <configuration>
                  <!-- run selenium server in background and log output ${basedir}target/server.log. 
										Append to ${basedir}/target/selenium/user-extensions.js -->
                  <background>true</background>
                  <logOutput>true</logOutput>
                  <userExtensions>${basedir}/target/olat-user-extensions.js</userExtensions>
                </configuration>
              </execution>
            </executions>
          </plugin>
<plugin>
    <groupId>org.codehaus.mojo</groupId>
    <artifactId>exec-maven-plugin</artifactId>
    <version>1.1.1</version>
    <executions>
      <execution>
        <id>sleep-an-hour-after-restart-selenium-server</id>
        <phase>test-compile</phase>
        <goals>
          <goal>exec</goal>
        </goals>
      </execution>
    </executions>
        <configuration>
          <executable>/bin/sh</executable>
          <!-- optional -->
          <workingDirectory>/tmp</workingDirectory>
          <arguments>
            <argument>-c</argument>
            <argument>sleep 3600</argument>
          </arguments>
        </configuration>
  </plugin>
        </plugins>
      </build>
    </profile>





    <profile>
      <id>seleniumtests</id>
      <!-- activate this profile to run Selenium based Integration Tests against a cluster running locally
      configures:
      - surefire-plugin to include none of the IntegrationTests
      - failsafe-plugin to include Seleniumtests via testng.xml
      
      in general hooks into: (please check the profile execution against the docu)
      - initialize
      ... cleans the tomcats working directories.
      - generate-resources
      ... resources-plugin to copy the maven.build.properties and selenium specific additionalUserContext.xml and specific olat.local.properties for tomcat-one and tomcat-two.
      ... copies jms configuration
      - generate-test-resources
      ... antrun-plugin to transform the olat page sets into selenium JS, creates the olat-user-extension.js file for selenium server start.
      ... resources-plugin to copy the maven.build.properties to the test-classes tree, would be needed for failsafe *ITCase tests.
      - pre-integration-test
      ... selenium-maven-plugin to start the selenium server (runs in the background and logs output to target/selenium/server.log) using the generated olat-user-extension.js
      ... starts an active mq jms for cluster instances.
      ... cargo-maven2-plugin deploying the asset OLAT-LMS into two tomcats which must be installed beforehand with (-Pinstall-tomcats)
      - post-integration-test
      ... cargo-maven2-plugin stops the started tomcat(s)
      ... stops active mq
      ... stops selenium
      -->
      <activation>
        <property>
          <name>with-selenium</name>
        </property>
      </activation>

      <properties>
        <!-- seleniumtests are started with the command mvn verify -Pseleniumtests -->

        <skipTests>false</skipTests>

        <skipITs>false</skipITs>
        <test.env.db.hibernate.ddl.auto> </test.env.db.hibernate.ddl.auto>
      </properties>

      <build>
        <plugins>
          <plugin>
            
	        <groupId>org.apache.maven.plugins</groupId>

            <artifactId>maven-surefire-plugin</artifactId>
			
            <version>2.8.1</version>
			
			<!-- skip all other tests during smoke tests -->
            <configuration>
          		<skipTests>true</skipTests>
          		<skipITs>true</skipITs>
        	</configuration>
        	
          </plugin>
           
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>

            <artifactId>maven-antrun-plugin</artifactId>

            <version>1.6</version>

            <executions>
              <execution>
                <phase>generate-test-resources</phase>

                <configuration>
                  <target unless="maven.test.skip">
                    <echo message="Generate ../target/olat-user-extensions.js for Seleniumserverstart" />

                    <xslt in="${basedir}/src/test/profile/selenium/ui-map/olat-ui-map.xml"
                          out="${basedir}/target/generated_combined_olat-ui-map.xml"
                          style="${basedir}/src/test/profile/selenium/ui-map/resources/resolve_includes.xsl" />

                    <xslt in="${basedir}/target/generated_combined_olat-ui-map.xml"
                          out="${basedir}/target/olat-ui-map.js"
                          style="${basedir}/src/test/profile/selenium/ui-map/resources/gen_olat-ui-map.xsl" />

                    <concat destfile="${basedir}/target/olat-user-extensions.js">
                      <fileset file="${basedir}/target/olat-ui-map.js" />

                      <fileset file="${basedir}/src/test/profile/selenium/ui-map/resources/rollups.js" />
                    </concat>
                  </target>
                </configuration>

                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <artifactId>maven-resources-plugin</artifactId>

            <!-- OK -->

            <version>2.4.3</version>

            <executions>
              <execution>
                <id>tomcat-one-server_xml</id>

                <phase>initialize</phase>

                <goals>
                  <goal>copy-resources</goal>
                </goals>

                <configuration>
                  <outputDirectory>${container.tomcat.one.home}/conf/</outputDirectory>

                  <resources>
                    <resource>
                      <directory>src/test/profile/cluster/tomcat-one/conf</directory>

                      <includes>
                        <include>server.xml</include>
                      </includes>

                      <filtering>true</filtering>
                    </resource>
                  </resources>
                </configuration>
              </execution>

              <execution>
                <id>tomcat-two-server_xml</id>

                <phase>initialize</phase>

                <goals>
                  <goal>copy-resources</goal>
                </goals>

                <configuration>
                  <outputDirectory>${container.tomcat.two.home}/conf/</outputDirectory>

                  <resources>
                    <resource>
                      <directory>src/test/profile/cluster/tomcat-two/conf</directory>

                      <includes>
                        <include>server.xml</include>
                      </includes>

                      <filtering>true</filtering>
                    </resource>
                  </resources>
                </configuration>
              </execution>

              <execution>
                <id>seleniumtests-config-tomcat-one</id>

                <phase>initialize</phase>

                <goals>
                  <goal>copy-resources</goal>
                </goals>

                <configuration>
                  <outputDirectory>${container.tomcat.one.home}/lib/</outputDirectory>

                  <overwrite>true</overwrite>

                  <resources>
                    <!-- olat.local.properties with different environments
                      typically meant for hsql / mysql / etc.   -->

                    <resource>
                      <directory>src/test/profile/cluster/tomcat-one/lib</directory>

                      <includes>
                        <include>olat.local.properties</include>

                        <include>treecache.xml</include>
                      </includes>

                      <filtering>true</filtering>
                    </resource>

                    <!-- Users to be created on OLAT startup for selenium testcases are configured in this file  -->

                    <resource>
                      <directory>${selenium.config.files.path}</directory>

                      <includes>
                        <include>additionalUserContext.xml</include>
                      </includes>

                      <filtering>true</filtering>
                    </resource>
                  </resources>
                </configuration>
              </execution>

              <execution>
                <id>seleniumtests-config-activemq</id>

                <phase>initialize</phase>

                <goals>
                  <goal>copy-resources</goal>
                </goals>

                <configuration>
                  <outputDirectory>cargo/</outputDirectory>

                  <overwrite>true</overwrite>

                  <resources>
                    <resource>
                      <directory>src/test/profile/cluster/activemq</directory>

                      <includes>
                        <include>activemq.xml</include>
                      </includes>

                      <filtering>true</filtering>
                    </resource>
                  </resources>
                </configuration>
              </execution>

              <execution>
                <id>seleniumtests-config-tomcat-two</id>

                <phase>initialize</phase>

                <goals>
                  <goal>copy-resources</goal>
                </goals>

                <configuration>
                  <outputDirectory>${container.tomcat.two.home}/lib/</outputDirectory>

                  <overwrite>true</overwrite>

                  <resources>
                    <resource>
                      <directory>src/test/profile/cluster/tomcat-two/lib</directory>

                      <includes>
                        <include>olat.local.properties</include>

                        <include>treecache.xml</include>
                      </includes>

                      <filtering>true</filtering>
                    </resource>
                  </resources>
                </configuration>
              </execution>

              <execution>
                <id>seleniumtests-config-misc</id>

                <phase>process-test-resources</phase>

                <goals>
                  <goal>copy-resources</goal>
                </goals>

                <configuration>
                  <outputDirectory>${basedir}/target/test-classes</outputDirectory>

                  <resources>
                    <resource>
                      <directory>${selenium.config.files.path}</directory>

                      <includes>
                        <include>${selenium.config.file}</include>

                        <include>${test.env.testngfile}</include>

                        <include>${test.env.debuggingtestngfile}</include>

                        <include>${test.env.fragileexiletestngfile}</include>
                      </includes>

                      <filtering>true</filtering>
                    </resource>

                    <resource>
                      <!-- place resources you like to get filtered an copied -->

                      <directory>src/main/resources/database/mysql</directory>

                      <includes>
                        <include>setupDatabase.sql</include>
                      </includes>

                      <filtering>true</filtering>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.mojo</groupId>

            <artifactId>sql-maven-plugin</artifactId>

            <version>1.4</version>

            <dependencies>
              <dependency>
                <!-- DO NOT UPDATE! -->

                <!-- Due to our special setup where we use the jdbc driver to convert 
				          from utf-8 to iso we cannot update this lib at the moment. -->

                <groupId>mysql</groupId>

                <artifactId>mysql-connector-java</artifactId>

                <version>5.0.8</version>
              </dependency>
            </dependencies>

            <!-- common configuration shared by all executions -->

            <configuration>
              <driver>com.mysql.jdbc.Driver</driver>

              <url>jdbc:mysql://${test.env.db.host}:${test.env.db.host.port}/${test.env.db.name}</url>

              <username>${test.env.db.user}</username>

              <password>${test.env.db.pass}</password>

              <!-- You can comment out username/password configurations and
                   have maven to look them up in your settings.xml using ${settingsKey}
              
              <settingsKey>sensibleKey</settingsKey>-->

              <!--all executions are ignored if -Dmaven.test.skip=true-->

              <skip>${maven.test.skip}</skip>
            </configuration>

            <executions>
              <execution>
                <id>drop-db-before-test</id>

                <phase>pre-integration-test</phase>

                <goals>
                  <goal>execute</goal>
                </goals>

                <configuration>
                  <!-- need another database to drop the targeted one -->

                  <url>jdbc:mysql://${test.env.db.host}:${test.env.db.host.port}/${test.env.db.4mvnplugin}</url>

                  <autocommit>true</autocommit>

                  <sqlCommand>drop database ${test.env.db.name}</sqlCommand>

                  <!-- ignore error when database is not avaiable -->

                  <onError>continue</onError>
                </configuration>
              </execution>

              <execution>
                <id>create-db</id>

                <phase>pre-integration-test</phase>

                <goals>
                  <goal>execute</goal>
                </goals>

                <configuration>
                  <url>jdbc:mysql://${test.env.db.host}:${test.env.db.host.port}/${test.env.db.4mvnplugin}</url>

                  <!-- no transaction -->

                  <autocommit>true</autocommit>

                  <sqlCommand>create database ${test.env.db.name}</sqlCommand>
                </configuration>
              </execution>

              <execution>
                <id>create-schema</id>

                <phase>pre-integration-test</phase>

                <goals>
                  <goal>execute</goal>
                </goals>

                <configuration>
                  <autocommit>true</autocommit>

                  <srcFiles>
                    <srcFile>target/test-classes/setupDatabase.sql</srcFile>
                  </srcFiles>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.apache.activemq.tooling</groupId>

            <artifactId>maven-activemq-plugin</artifactId>

            <version>5.3.0</version>

            <executions>
              <execution>
                <phase>pre-integration-test</phase>

                <goals>
                  <goal>run</goal>
                </goals>

                <configuration>
                  <!-- windows problems with url see https://issues.apache.org/jira/browse/AMQ-2293 
                  C:/Users/patrick/uzh/hg.clones/ORID-1003-->

                  <configUri>xbean:file:${test.env.cluster.activemq.configdir}/activemq.xml</configUri>

                  <fork>true</fork>

                  <systemProperties>
                    <property>
                      <name>org.apache.activemq.default.directory.prefix</name>

                      <value>./target/</value>
                    </property>
                  </systemProperties>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.mojo</groupId>

            <artifactId>selenium-maven-plugin</artifactId>

            <version>1.1</version>

            <executions>
              <execution>
                <phase>pre-integration-test</phase>

                <goals>
                  <goal>start-server</goal>
                </goals>

                <configuration>
                  <!-- run selenium server in background and log output ${basedir}target/server.log. 
										Append to ${basedir}/target/selenium/user-extensions.js -->

                  <background>true</background>

                  <logOutput>true</logOutput>

                  <userExtensions>${basedir}/target/olat-user-extensions.js</userExtensions>

                  <port>${test.env.selenium.port}</port>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>

            <artifactId>maven-failsafe-plugin</artifactId>

            <version>2.7.2</version>

            <configuration>
              <suiteXmlFiles>
                <!-- Seleniumtests run with testng, the included tests are defined in the following suite xml.
                      The file is located in src/test/resources/${test.env.testngfile}. Dependencies of tests are defined
                      over annotations.  -->

                <suiteXmlFile>target/test-classes/${test.env.testngfile}</suiteXmlFile>
              </suiteXmlFiles>

              <testFailureIgnore>true</testFailureIgnore>
            </configuration>

            <executions>
              <execution>
                <id>integration-test</id>

                <goals>
                  <goal>integration-test</goal>
                </goals>
              </execution>

              <execution>
                <id>verify</id>

                <goals>
                  <goal>verify</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.cargo</groupId>

            <artifactId>cargo-maven2-plugin</artifactId>

            <configuration>
              <container>
                <containerId>tomcat6x</containerId>

                <timeout>${cargo.container.timeout}</timeout>
              </container>
            </configuration>

            <executions>
              <execution>
                <id>tomcat-one-start</id>

                <phase>pre-integration-test</phase>

                <goals>
                  <goal>start</goal>
                </goals>

                <configuration>
                  <wait>false</wait>

                  <container>
                    <containerId>tomcat6x</containerId>

                    <type>installed</type>

                    <home>${container.tomcat.one.home}</home>
                  </container>

                  <configuration>
                    <type>existing</type>

                    <home>${container.tomcat.one.home}</home>

                    <properties>
                      <cargo.servlet.port>${container.tomcat.one.port}</cargo.servlet.port>

                      <cargo.logging>high</cargo.logging>

                      <cargo.jvmargs>${container.tomcat.one.jvmargs}</cargo.jvmargs>
                    </properties>

                    <deployables>
                      <deployable>
                        <groupId>org.olat</groupId>

                        <artifactId>OLAT-LMS</artifactId>

                        <type>war</type>

                        <properties>
                          <context>olat</context>
                        </properties>

                        <pingURL>http://localhost:${container.tomcat.one.port}/cargocpc/</pingURL>

                        <pingTimeout>300000</pingTimeout>
                      </deployable>
                    </deployables>
                  </configuration>
                </configuration>
              </execution>

              <execution>
                <id>tomcat-one-stop</id>

                <phase>post-integration-test</phase>

                <goals>
                  <goal>stop</goal>
                </goals>

                <configuration>
                  <configuration>
                    <type>existing</type>

                    <home>${container.tomcat.one.home}</home>
                  </configuration>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.cargo</groupId>

            <artifactId>cargo-maven2-plugin</artifactId>

            <configuration>
              <container>
                <containerId>tomcat6x</containerId>

                <timeout>${cargo.container.timeout}</timeout>
              </container>
            </configuration>

            <executions>
              <execution>
                <id>tomcat-two-start</id>

                <phase>pre-integration-test</phase>

                <goals>
                  <goal>start</goal>
                </goals>

                <configuration>
                  <wait>${cargo.container.wait}</wait>

                  <container>
                    <containerId>tomcat6x</containerId>

                    <type>installed</type>

                    <home>${container.tomcat.two.home}</home>
                  </container>

                  <configuration>
                    <type>existing</type>

                    <home>${container.tomcat.two.home}</home>

                    <properties>
                      <cargo.servlet.port>${container.tomcat.two.port}</cargo.servlet.port>

                      <cargo.logging>high</cargo.logging>

                      <cargo.jvmargs>${container.tomcat.two.jvmargs}</cargo.jvmargs>
                    </properties>

                    <deployables>
                      <deployable>
                        <groupId>org.olat</groupId>

                        <artifactId>OLAT-LMS</artifactId>

                        <type>war</type>

                        <properties>
                          <context>olat</context>
                        </properties>

                        <pingURL>http://localhost:${container.tomcat.two.port}/cargocpc/</pingURL>

                        <pingTimeout>300000</pingTimeout>
                      </deployable>
                    </deployables>
                  </configuration>
                </configuration>
              </execution>

              <execution>
                <id>tomcat-two-stop</id>

                <phase>post-integration-test</phase>

                <goals>
                  <goal>stop</goal>
                </goals>

                <configuration>
                  <configuration>
                    <type>existing</type>

                    <home>${container.tomcat.two.home}</home>
                  </configuration>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <artifactId>maven-clean-plugin</artifactId>

            <version>2.4.1</version>

            <executions>
              <execution>
                <id>clean-tomcat-directories</id>

                <phase>initialize</phase>

                <goals>
                  <goal>
		                clean
		              </goal>
                </goals>

                <configuration>
                  <excludeDefaultDirectories>true</excludeDefaultDirectories>

                  <filesets>
                    <fileset>
                      <directory>${container.tomcat.one.home}/webapps/</directory>

                      <includes>
                        <include>olat.war</include>

                        <include>**/olat/**</include>
                      </includes>
                    </fileset>

                    <fileset>
                      <directory>${container.tomcat.one.home}/work/</directory>

                      <includes>
                        <include>**/SESSIONS.ser</include>
                      </includes>
                    </fileset>

                    <fileset>
                      <directory>${container.tomcat.two.home}/webapps/</directory>

                      <includes>
                        <include>olat.war</include>

                        <include>**/olat/**</include>
                      </includes>
                    </fileset>

                    <fileset>
                      <directory>${container.tomcat.two.home}/work/</directory>

                      <includes>
                        <include>**/SESSIONS.ser</include>
                      </includes>
                    </fileset>
                  </filesets>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <repositories>
    <repository>
       <id>maven.java.net</id>
       <name>Maven Java Net Snapshots and Releases</name>
       <url>http://download.java.net/maven/2</url>
    </repository>
    <repository>
      <!-- the Community repo is always used for dependencies -->
      <id>repo.olat.org</id>
      <name>OLAT Maven Repository</name>
      <url>http://repo.olat.org/nexus/content/repositories/OLAT</url>
    </repository>
    <repository>
      <!-- the Community repo is always used for snapshot dependencies -->
      <id>SNAPHSHOTS_repo.olat.org</id>
      <name>OLAT Maven Repository</name>
      <url>http://repo.olat.org/nexus/content/repositories/snapshots/</url>
    </repository>
    <repository>
      <!-- the Community repo is always used for release dependencies -->
      <id>RELEASES_repo.olat.org</id>
      <name>OLAT Maven Repository</name>
      <url>http://repo.olat.org/nexus/content/repositories/releases/</url>
    </repository>
  </repositories>

  <build>
    <!-- Useful maven commands: o mvn dependency:tree - check to see what other 
			dependencies get downloaded by an artifact o Maven lifecycle: Each phase 
			of the lifecycle can also be called independent - e.g. mvn process-resources 
			- http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Lifecycle_Reference 
			o mvn versions:display-plugin-updates (find updates to maven plugins) o mvn 
			versions:use-latest-versions (automatically update dependencies. WARNING!!!) 
			o mvn versions:display-dependency-updates (shows updates for dependencies) 
			o mvn help:effective-pom - displays the computed pom, where you will see 
			what is getting executed after expanding vars and plugin settings -->

    <resources>
      <!-- as long as we have resources like html, css, js in the src/main/java 
				tree we need these two entries. the first tells maven to treat the java folder 
				as the resource folder but not to copy the java files. The later tell maven 
				that we have an other resource folder which is normally the default -->

      <resource>
        <directory>src/main/java</directory>

        <excludes>
          <exclude>**/*.java</exclude>
        </excludes>
      </resource>

      <resource>
        <directory>src/main/resources</directory>

        <!-- when enabled resources will be searched and variables replaces with 
					values -->

        <filtering>false</filtering>
      </resource>
    </resources>

    <testResources>
      <!-- Same comment as for src/main/java also applies to src/test/java -->

      <testResource>
        <directory>src/test/java</directory>

        <excludes>
          <exclude>**/*.java</exclude>
        </excludes>
      </testResource>

      <testResource>
        <directory>src/test/resources</directory>

        <!-- when enabled resources will be searched and variables replaces with 
					values -->

        <filtering>false</filtering>
      </testResource>
    </testResources>

    <plugins>
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>

        <version>2.4.3</version>

        <executions>
          <execution>
            <id>copy-resources</id>

            <!-- hook in to generate and copy filtered resources when running eclipse:eclipse 
	as this plugin runs in the generete-resources phase -->

            <phase>generate-resources</phase>

            <goals>
              <goal>copy-resources</goal>
            </goals>

            <configuration>
              <outputDirectory>${basedir}/target/classes</outputDirectory>

              <resources>
                <resource>
                  <!-- place resources you like to get filtered an copied -->

                  <directory>src/main/templates</directory>

                  <filtering>true</filtering>
                </resource>

                <resource>
                  <directory>src/main/profile</directory>

                  <includes>
                    <include>${os.property.file}</include>
                  </includes>

                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <id>copy-eclipse-settings</id>

            <!-- hook in to generate and copy filtered resources when running eclipse:eclipse 
	as this plugin runs in the generete-resources phase -->

            <phase>generate-resources</phase>

            <goals>
              <goal>copy-resources</goal>
            </goals>

            <configuration>
              <outputDirectory>${basedir}/.settings</outputDirectory>

              <resources>
                <resource>
                  <!-- place resources you like to get filtered an copied -->

                  <directory>eclipse-conf/.settings</directory>

                  <filtering>false</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <!-- Documentation: http://maven.apache.org/plugins/maven-surefire-plugin/ -->

        <groupId>org.apache.maven.plugins</groupId>

        <artifactId>maven-surefire-plugin</artifactId>

        <version>2.8.1</version>

        <configuration>
          <argLine>-Xmx1024m -Xms1024m</argLine>

          <testNGArtifactName>none:none</testNGArtifactName>

          <includes>
            <include>**/*Test*.java</include>

            <include>**/specification/SpecificationFixture.java</include>
          </includes>

          <excludes>
            <exclude>**/specification/**/*Test.java</exclude>

            <exclude>**/test/functional/**/*.java</exclude>

            <exclude>**/test/load/**/*.java</exclude>

            <exclude>**/test/tutorial/**/*.java</exclude>

            <exclude>**/test/util/**/*.java</exclude>

            <exclude>**/OlatTestCase.java</exclude>

            <exclude>**/SchedulerTestJob.java</exclude>

            <exclude>**/SchedulerTestJobWithDB.java</exclude>
          </excludes>

          <systemProperties>
            <property>
              <name>concordion.output.dir</name>
              <value>target/site</value>
            </property>

            <property>
              <name>concordion.extensions</name>
              <value>org.olat.concordion.tocextension.TableOfContentExtension</value>
            </property>
          </systemProperties>
        </configuration>
      </plugin>

      <plugin>
        <artifactId>maven-resources-plugin</artifactId>

        <version>2.4.3</version>

        <executions>
          <execution>
            <id>copy-resources-4-concordion</id>

            <!-- hook in to copy maven.build.properties to allow test and integration-test phase run properly -->

            <phase>generate-test-resources</phase>

            <goals>
              <goal>copy-resources</goal>
            </goals>

            <configuration>
              <outputDirectory>${basedir}/target/site/specification</outputDirectory>

              <resources>
                <resource>
                  <!-- place resources you like to get filtered an copied -->

                  <directory>src/test/resources/specification/</directory>

                  

                  <filtering>false</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>

    <pluginManagement>
      <plugins>
        <!-- OLAT requires JDK 1.6 or later ! -->

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>

          <artifactId>maven-compiler-plugin</artifactId>

          <configuration>
            <source>1.6</source>

            <target>1.6</target>

            <!-- These apparently harmless settings cause certain types of builds 
							to fail (typically with a failure to find the "javac" program ) - this appears 
							to be a Maven issue and is currently pending investigation <fork>true</fork> 
							<meminitial>512m</meminitial> <maxmem>1024m</maxmem> -->

            <encoding>UTF-8</encoding>
          </configuration>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>

          <artifactId>maven-war-plugin</artifactId>

          <version>2.1.1</version>
        </plugin>

        <plugin>
          <groupId>org.codehaus.cargo</groupId>

          <artifactId>cargo-maven2-plugin</artifactId>

          <version>1.1.3</version>
        </plugin>

        <!-- The Eclipse plugin is only of interest to developers and requires 
					that WTP be installed. -->

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>

          <artifactId>maven-eclipse-plugin</artifactId>

          <version>2.7</version>

          <configuration>
            <wtpversion>2.0</wtpversion>

            <!-- context name for servlet container e.g. localhost:8080/olat -->

            <wtpContextName>olat</wtpContextName>

            <downloadSources>false</downloadSources>

            <!-- maven by default assumes that eclipse has always it own support for aop and therefore
						does not include the aspectj jars into the classpath. By telling none the jars are included -->

            <ajdtVersion>none</ajdtVersion>
          </configuration>
        </plugin>

        <!-- reporting i.e., the site goal requires a more recent plugin version -->

        <plugin>
          <artifactId>maven-site-plugin</artifactId>

          <version>2.2</version>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>

          <artifactId>maven-enforcer-plugin</artifactId>

          <executions>
            <execution>
              <id>show-versions</id>

              <phase>validate</phase>

              <goals>
                <goal>display-info</goal>
              </goals>
            </execution>

            <execution>
              <id>enforce-versions</id>

              <goals>
                <goal>enforce</goal>
              </goals>

              <configuration>
                <rules>
                  <requireMavenVersion>
                    <version>2.2+</version>
                  </requireMavenVersion>

                  <requireJavaVersion>
                    <version>1.6+</version>
                  </requireJavaVersion>
                </rules>
              </configuration>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>

  <!-- check with mvn dependency:tree to see what other dep. get downloaded -->

  <dependencies>
    <dependency>
      <groupId>org.concordion</groupId>

      <artifactId>concordion</artifactId>

      <version>1.4.2</version>

      <scope>test</scope>
    </dependency>

    <dependency>

      <groupId>org.olat.plugins</groupId>

      <artifactId>olat-concordion-extensions</artifactId>

      <version>1.0.1-SNAPSHOT</version>

      <scope>test</scope>
    </dependency>

    <dependency>
      <!-- dependency for concordion, which is not automatically included with concordion? -->

      <groupId>xom</groupId>

      <artifactId>xom</artifactId>

      <version>1.2.5</version>

      <scope>test</scope>

      <!-- Excludes optional artifacts -->

      <exclusions>
        <exclusion>
          <groupId>xerces</groupId>

          <artifactId>xmlParserAPIs</artifactId>
        </exclusion>

        <exclusion>
          <groupId>xerces</groupId>

          <artifactId>xercesImpl</artifactId>
        </exclusion>

        <exclusion>
          <groupId>xalan</groupId>

          <artifactId>xalan</artifactId>
        </exclusion>

        <exclusion>
          <groupId>jaxen</groupId>

          <artifactId>jaxen</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>org.olat.testutils</groupId>

      <artifactId>olat-codepoints-full</artifactId>

      <version>olat-codepoints-full.jar</version>

      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.activemq</groupId>

      <artifactId>activemq-core</artifactId>

      <version>5.3.2</version>

      <exclusions>
        <exclusion>
          <groupId>backport-util-concurrent</groupId>

          <artifactId>backport-util-concurrent</artifactId>
        </exclusion>

        <exclusion>
          <groupId>javax.activation</groupId>

          <artifactId>activation</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>org.beanshell</groupId>

      <artifactId>bsh-core</artifactId>

      <version>2.0b4</version>
    </dependency>

    <dependency>
      <groupId>cglib</groupId>

      <artifactId>cglib</artifactId>

      <version>2.2</version>

      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>commons-codec</groupId>

      <artifactId>commons-codec</artifactId>

      <version>1.4</version>
    </dependency>

    <dependency>
      <groupId>commons-collections</groupId>

      <artifactId>commons-collections</artifactId>

      <version>3.2.1</version>
    </dependency>

    <dependency>
      <groupId>commons-io</groupId>

      <artifactId>commons-io</artifactId>

      <version>1.4</version>
    </dependency>

    <dependency>
      <groupId>commons-vfs</groupId>

      <artifactId>commons-vfs</artifactId>

      <version>1.0</version>

      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>ical4j</groupId>

      <artifactId>ical4j</artifactId>

      <version>0.9.19</version>

      <!-- Must be version 0.9.19 ! Newer version have 
				problem with 'serientermin' -->

      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.derby</groupId>

      <artifactId>derby</artifactId>

      <version>10.4.2.0</version>
    </dependency>

    <dependency>
      <groupId>javassist</groupId>

      <artifactId>javassist</artifactId>

      <version>3.8.0.GA</version>
    </dependency>

    <dependency>
      <groupId>oro</groupId>

      <artifactId>oro</artifactId>

      <version>2.0.8</version>
    </dependency>

    <dependency>
      <groupId>jamwikiParser.jar</groupId>

      <artifactId>jamwikiParser.jar</artifactId>

      <version>jamwikiParser.jar</version>
    </dependency>

    <dependency>
      <groupId>jaxen</groupId>

      <artifactId>jaxen</artifactId>

      <version>1.1.1</version>
    </dependency>

    <dependency>
      <groupId>com.ibm.icu</groupId>

      <artifactId>icu4j</artifactId>

      <version>4.0.1</version>
    </dependency>

    <dependency>
      <groupId>opensaml</groupId>

      <artifactId>opensaml</artifactId>

      <version>1.1</version>
    </dependency>

    <dependency>
      <groupId>org.jivesoftware</groupId>

      <artifactId>smack</artifactId>

      <version>3.1.0</version>
    </dependency>

    <dependency>
      <groupId>org.jivesoftware</groupId>

      <artifactId>smackx</artifactId>

      <version>3.1.0</version>
    </dependency>

    <dependency>
      <groupId>org.apache.lucene</groupId>

      <artifactId>lucene-highlighter</artifactId>

      <version>3.0.2</version>
    </dependency>

    <dependency>
      <groupId>org.apache.lucene</groupId>

      <artifactId>lucene-spellchecker</artifactId>

      <version>3.0.2</version>
    </dependency>

    <dependency>
      <groupId>org.apache.poi</groupId>

      <artifactId>poi</artifactId>

      <version>3.9</version>
    </dependency>

    <dependency>
      <groupId>org.apache.poi</groupId>

      <artifactId>poi-scratchpad</artifactId>

      <version>3.9</version>
    </dependency>

    <dependency>
      <groupId>org.apache.poi</groupId>

      <artifactId>poi-ooxml</artifactId>

      <version>3.9</version>

      <exclusions>
        <exclusion>
          <!-- included in jdk 1.6 -->

          <groupId>stax</groupId>

          <artifactId>stax-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>org.apache.pdfbox</groupId>

      <artifactId>pdfbox</artifactId>

      <version>1.7.1</version>
    </dependency>

    <dependency>
      <groupId>org.bouncycastle</groupId>

      <artifactId>bcmail-jdk15</artifactId>

      <version>1.44</version>
    </dependency>

    <dependency>
      <groupId>org.bouncycastle</groupId>

      <artifactId>bcprov-jdk15</artifactId>

      <version>1.44</version>
    </dependency>

    <dependency>
      <groupId>jdom</groupId>

      <artifactId>jdom</artifactId>

      <version>1.0</version>
    </dependency>

    <dependency>
      <groupId>jgrapht</groupId>

      <artifactId>jgrapht</artifactId>

      <version>0.6.0</version>
    </dependency>

    <dependency>
      <groupId>org.jboss</groupId>

      <artifactId>jboss-common-core</artifactId>

      <version>2.2.8.GA</version>
    </dependency>

    <dependency>
      <groupId>org.jboss.logging</groupId>

      <artifactId>jboss-logging-spi</artifactId>

      <version>2.0.5.GA</version>
    </dependency>

    <dependency>
      <groupId>org.jboss.cache</groupId>

      <artifactId>jbosscache-core</artifactId>

      <version>3.2.2.GA</version>

      <!-- cache is used in webdav session cache -->
    </dependency>

    <dependency>
      <groupId>reload-diva</groupId>

      <artifactId>reload-diva</artifactId>

      <version>reload_dist255-diva.jar</version>
    </dependency>

    <dependency>
      <groupId>reload-dweezil</groupId>

      <artifactId>reload-dweezil</artifactId>

      <version>reload_dist255-dweezil.jar</version>
    </dependency>

    <dependency>
      <groupId>reload-jdom</groupId>

      <artifactId>reload-jdom</artifactId>

      <version>reload_dist255-jdom.jar</version>
    </dependency>

    <dependency>
      <groupId>reload-moonunit</groupId>

      <artifactId>reload-moonunit</artifactId>

      <version>reload_dist255-moonunit.jar</version>
    </dependency>

    <dependency>
      <groupId>rome</groupId>

      <artifactId>rome</artifactId>

      <version>1.0</version>
    </dependency>

    <dependency>
      <groupId>jfree</groupId>

      <artifactId>jfreechart</artifactId>

      <version>1.0.1</version>
    </dependency>

    <dependency>
      <groupId>ch.ethz</groupId>

      <artifactId>pfplms-scorm</artifactId>

      <version>unknown</version>

      <classifier>patched</classifier>

      <!-- patched version of scorm adapter: 
				contact: matthai.kurian@gmail.com -->
    </dependency>

    <dependency>
      <groupId>gnu-regexp</groupId>

      <artifactId>gnu-regexp</artifactId>

      <version>1.1.4</version>
    </dependency>

    <dependency>
      <groupId>javax.sql</groupId>

      <artifactId>jdbc-stdext</artifactId>

      <version>2.0</version>
    </dependency>

    <dependency>
      <!-- DO NOT UPDATE! -->

      <!-- Due to our special setup where we use the jdbc driver to convert 
				from utf-8 to iso we cannot update this lib at the moment. -->

      <groupId>mysql</groupId>

      <artifactId>mysql-connector-java</artifactId>

      <version>5.0.8</version>
    </dependency>

    <dependency>
      <groupId>postgresql</groupId>

      <artifactId>postgresql</artifactId>

      <version>8.4-701.jdbc4</version>
    </dependency>

    <dependency>
      <groupId>org.slf4j</groupId>

      <artifactId>slf4j-api</artifactId>

      <version>1.5.11</version>
    </dependency>

    <dependency>
      <groupId>org.slf4j</groupId>

      <artifactId>slf4j-log4j12</artifactId>

      <version>1.5.11</version>
    </dependency>

    <dependency>
      <groupId>edenlib</groupId>

      <artifactId>edenlib</artifactId>

      <version>1.3</version>
    </dependency>

    <!-- basic LTI stuff for lti demo: http://www.imsglobal.org/toolsinteroperability2.cfm -->

    <dependency>
      <groupId>org.sakaiproject.basiclti</groupId>

      <artifactId>basiclti-util</artifactId>

      <version>1.4</version>
    </dependency>

    <!-- core dependencies -->

    <dependency>
      <groupId>javax.servlet</groupId>

      <artifactId>servlet-api</artifactId>

      <version>2.5</version>

      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>tomcat</groupId>

      <artifactId>naming-resources</artifactId>

      <version>5.5.15</version>
    </dependency>

    <dependency>
      <groupId>commons-fileupload</groupId>

      <artifactId>commons-fileupload</artifactId>

      <version>1.2.1</version>

      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>net.sourceforge.nekohtml</groupId>

      <artifactId>nekohtml</artifactId>

      <version>1.9.11</version>
    </dependency>

    <dependency>
      <groupId>owaspantisamy</groupId>

      <artifactId>antisamy</artifactId>

      <version>1.3</version>
    </dependency>

    <dependency>
      <groupId>org.w3c.css</groupId>

      <artifactId>sac</artifactId>

      <version>1.3</version>
    </dependency>

    <dependency>
      <groupId>batik</groupId>

      <artifactId>batik-css</artifactId>

      <version>1.6</version>
    </dependency>

    <dependency>
      <groupId>batik</groupId>

      <artifactId>batik-util</artifactId>

      <version>1.6</version>
    </dependency>

    <dependency>
      <groupId>de.java2html</groupId>

      <artifactId>java2html</artifactId>

      <version>5.0</version>
    </dependency>

    <dependency>
      <groupId>commons-logging</groupId>

      <artifactId>commons-logging</artifactId>

      <version>1.0</version>
    </dependency>

    <dependency>
      <groupId>wsdl4j</groupId>

      <artifactId>wsdl4j</artifactId>

      <version>1.6.2</version>
    </dependency>

    <dependency>
      <groupId>org.apache.ws.commons.schema</groupId>

      <artifactId>XmlSchema</artifactId>

      <version>1.4.2</version>
    </dependency>

    <dependency>
      <groupId>commons-httpclient</groupId>

      <artifactId>commons-httpclient</artifactId>

      <version>3.1</version>
    </dependency>

    <!-- <dependency> -->

    <!-- <groupId>org.springframework</groupId> -->

    <!-- <artifactId>spring</artifactId> -->

    <!-- <version>2.5.6</version> -->

    <!-- <exclusions> -->

    <!-- <exclusion> -->

    <!-- <groupId>backport-util-concurrent</groupId> -->

    <!-- <artifactId>backport-util-concurrent</artifactId> -->

    <!-- </exclusion> -->

    <!-- <exclusion> -->

    <!-- <groupId>javax.activation</groupId> -->

    <!-- <artifactId>activation</artifactId> -->

    <!-- </exclusion> -->

    <!-- </exclusions> -->

    <!-- </dependency> -->

    <dependency>
      <groupId>commons-lang</groupId>

      <artifactId>commons-lang</artifactId>

      <version>2.5</version>
    </dependency>

    <dependency>
      <groupId>codepoints</groupId>

      <artifactId>codepoints</artifactId>

      <version>1.0.3</version>
    </dependency>

    <dependency>
      <groupId>olat-extension-springtest</groupId>

      <artifactId>olat-extension-springtest</artifactId>

      <version>1.1</version>

      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>junit</groupId>

      <artifactId>junit</artifactId>

      <version>4.5</version>

      <!-- 4.7 somehow does not work with spring 3.0, may test later... -->

      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.hibernate</groupId>

      <artifactId>hibernate-core</artifactId>

      <version>${org.hibernate.version}</version>

      <exclusions>
        <exclusion>
          <groupId>org.slf4j</groupId>

          <artifactId>slf4j-log4j12</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>org.hibernate.javax.persistence</groupId>

      <artifactId>hibernate-jpa-2.0-api</artifactId>

      <version>1.0.0.Final</version>
    </dependency>

    <dependency>
      <groupId>org.hibernate</groupId>

      <artifactId>hibernate-jmx</artifactId>

      <version>${org.hibernate.version}</version>
    </dependency>

    <dependency>
      <groupId>org.hibernate</groupId>

      <artifactId>hibernate-c3p0</artifactId>

      <version>${org.hibernate.version}</version>

      <exclusions>
        <!-- includes an old version of c3p0 -->

        <exclusion>
          <artifactId>c3p0</artifactId>

          <groupId>c3p0</groupId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>org.hibernate</groupId>

      <artifactId>hibernate-jbosscache2</artifactId>

      <version>${org.hibernate.version}</version>

      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>org.hibernate</groupId>

      <artifactId>hibernate-annotations</artifactId>

      <version>${org.hibernate.annotations.version}</version>
    </dependency>

    <dependency>
      <groupId>jgroups</groupId>

      <artifactId>jgroups</artifactId>

      <version>2.6.14.GA</version>
    </dependency>

    <dependency>
      <groupId>c3p0</groupId>

      <artifactId>c3p0</artifactId>

      <version>0.9.1.2</version>
    </dependency>

    <dependency>
      <groupId>log4j</groupId>

      <artifactId>log4j</artifactId>

      <version>1.2.16</version>
    </dependency>

    <dependency>
      <groupId>org.apache.velocity</groupId>

      <artifactId>velocity</artifactId>

      <version>1.6.2</version>
    </dependency>

    <dependency>
      <groupId>radeox</groupId>

      <artifactId>radeox</artifactId>

      <version>1.0-b2</version>
    </dependency>

    <dependency>
      <groupId>net.sf.ehcache</groupId>

      <artifactId>ehcache</artifactId>

      <version>1.3.0</version>

      <!-- Needed by axis2 -->

      <!-- <exclusions> <exclusion> <groupId>backport-util-concurrent</groupId> 
				<artifactId>backport-util-concurrent</artifactId> </exclusion> </exclusions> -->
    </dependency>

    <dependency>
      <groupId>jazzlib</groupId>

      <artifactId>jazzlib</artifactId>

      <version>0.0.6</version>

      <!-- do not replace with 0.0.7 as this version is highly patched. -->

      <classifier>patched</classifier>
    </dependency>

    <dependency>
      <groupId>org.json</groupId>

      <artifactId>json</artifactId>

      <version>20080701</version>
    </dependency>

    <dependency>
      <groupId>quartz</groupId>

      <artifactId>quartz</artifactId>

      <version>1.5.2</version>
    </dependency>

    <dependency>
      <groupId>com.thoughtworks.xstream</groupId>

      <artifactId>xstream</artifactId>

      <version>1.3.1</version>
    </dependency>

    <dependency>
      <groupId>cos</groupId>

      <artifactId>cos</artifactId>

      <version>05Nov2002</version>
    </dependency>

    <dependency>
      <groupId>xerces</groupId>

      <artifactId>xmlParserAPIs</artifactId>

      <version>2.6.2</version>
    </dependency>

    <dependency>
      <groupId>dom4j</groupId>

      <artifactId>dom4j</artifactId>

      <version>1.6.1</version>
    </dependency>

    <dependency>
      <groupId>xerces</groupId>

      <artifactId>xercesImpl</artifactId>

      <version>2.9.1</version>
    </dependency>

    <dependency>
      <groupId>xml-apis</groupId>

      <artifactId>xml-apis</artifactId>

      <version>1.3.04</version>
    </dependency>

    <dependency>
      <groupId>javax.mail</groupId>

      <artifactId>mail</artifactId>

      <version>1.4.3</version>
    </dependency>

    <dependency>
      <groupId>com.neemsoft</groupId>

      <artifactId>jmep</artifactId>

      <version>unknown</version>

      <classifier>patched</classifier>

      <!-- unknown patched version of jmep (java mathematical expression parser)[http://jmep.tigris.org/], 
				do not replace unless you know what you do! -->
    </dependency>

    <dependency>
      <groupId>org.apache.lucene</groupId>

      <artifactId>lucene-core</artifactId>

      <version>3.0.2</version>
    </dependency>

    <dependency>
      <groupId>hsqldb</groupId>

      <artifactId>hsqldb</artifactId>

      <version>2.0.0-rc8</version>
    </dependency>

    <!-- Spring dependencies -->

    <dependency>
      <groupId>org.springframework</groupId>

      <artifactId>spring-core</artifactId>

      <version>${org.springframework.version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>

      <artifactId>spring-expression</artifactId>

      <version>${org.springframework.version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>

      <artifactId>spring-beans</artifactId>

      <version>${org.springframework.version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>

      <artifactId>spring-context</artifactId>

      <version>${org.springframework.version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>

      <artifactId>spring-context-support</artifactId>

      <version>${org.springframework.version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>

      <artifactId>spring-jdbc</artifactId>

      <version>${org.springframework.version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>

      <artifactId>spring-test</artifactId>

      <version>${org.springframework.version}</version>

      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>

      <artifactId>spring-web</artifactId>

      <version>${org.springframework.version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>

      <artifactId>spring-orm</artifactId>

      <version>${org.springframework.version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>

      <artifactId>spring-aop</artifactId>

      <version>${org.springframework.version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>

      <artifactId>spring-aspects</artifactId>

      <version>${org.springframework.version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>

      <artifactId>spring-jms</artifactId>

      <version>${org.springframework.version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>

      <artifactId>spring-instrument</artifactId>

      <version>${org.springframework.version}</version>
    </dependency>

    <dependency>
      <groupId>org.apache.xbean</groupId>

      <artifactId>xbean-spring</artifactId>

      <version>3.6</version>
    </dependency>

    <dependency>
      <groupId>org.springframework.integration</groupId>

      <artifactId>spring-integration-core</artifactId>

      <version>2.0.5.RELEASE</version>
    </dependency>

    <dependency>
      <groupId>org.springframework.integration</groupId>

      <artifactId>spring-integration-file</artifactId>

      <version>2.0.5.RELEASE</version>
    </dependency>
    
    <dependency>                                                       
      <groupId>org.springframework.batch</groupId>                     
      <artifactId>spring-batch-core</artifactId>                                                    
      <version>2.1.8.RELEASE</version>   
      <exclusions>                                                     
        <exclusion>                                                    
          <groupId>commons-logging</groupId>                           
          <artifactId>commons-logging</artifactId>                     
        </exclusion>                                                   
      </exclusions>                            
    </dependency>  
    
    <dependency>                                                       
      <groupId>org.springframework.batch</groupId>                     
      <artifactId>                                                     
        spring-batch-infrastructure                                    
      </artifactId>                                                    
      <version>2.1.8.RELEASE</version>   
    </dependency>  

    <!-- end Spring dependencies -->

    <!-- Start Jersey dependency -->

    <dependency>
      <groupId>javax.ws.rs</groupId>

      <artifactId>jsr311-api</artifactId>

      <version>1.1.1</version>
    </dependency>

    <dependency>
      <groupId>com.sun.jersey</groupId>

      <artifactId>jersey-server</artifactId>

      <version>1.1.5.1</version>

      <exclusions>
        <exclusion>
          <groupId>org.springframework</groupId>

          <artifactId>spring-core</artifactId>
        </exclusion>

        <exclusion>
          <groupId>org.springframework</groupId>

          <artifactId>spring</artifactId>
        </exclusion>

        <exclusion>
          <groupId>org.springframework</groupId>

          <artifactId>spring-beans</artifactId>
        </exclusion>

        <exclusion>
          <groupId>org.springframework</groupId>

          <artifactId>spring-context</artifactId>
        </exclusion>

        <exclusion>
          <groupId>org.springframework</groupId>

          <artifactId>spring-web</artifactId>
        </exclusion>

        <exclusion>
          <groupId>org.springframework</groupId>

          <artifactId>spring-aop</artifactId>
        </exclusion>

        <exclusion>
          <groupId>org.springframework</groupId>

          <artifactId>spring-jca</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>com.sun.jersey.contribs</groupId>

      <artifactId>jersey-spring</artifactId>

      <version>1.1.5.1</version>

      <exclusions>
        <exclusion>
          <groupId>org.springframework</groupId>

          <artifactId>spring-core</artifactId>
        </exclusion>

        <exclusion>
          <groupId>org.springframework</groupId>

          <artifactId>spring</artifactId>
        </exclusion>

        <exclusion>
          <groupId>org.springframework</groupId>

          <artifactId>spring-beans</artifactId>
        </exclusion>

        <exclusion>
          <groupId>org.springframework</groupId>

          <artifactId>spring-context</artifactId>
        </exclusion>

        <exclusion>
          <groupId>org.springframework</groupId>

          <artifactId>spring-web</artifactId>
        </exclusion>

        <exclusion>
          <groupId>org.springframework</groupId>

          <artifactId>spring-aop</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>com.sun.jersey.contribs</groupId>

      <artifactId>jersey-multipart</artifactId>

      <version>1.1.5.1</version>
    </dependency>

    <dependency>
      <groupId>com.sun.jersey</groupId>

      <artifactId>jersey-json</artifactId>

      <version>1.1.5.1</version>

      <exclusions>
        <exclusion>
          <groupId>stax</groupId>

          <artifactId>stax-api</artifactId>
        </exclusion>

        <exclusion>
          <groupId>javax.xml.bind</groupId>

          <artifactId>jaxb-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>com.sun.jersey</groupId>

      <artifactId>jersey-test-framework</artifactId>

      <version>1.1.5.1</version>

      <scope>test</scope>

      <exclusions>
        <exclusion>
          <groupId>org.glassfish.embedded</groupId>

          <artifactId>glassfish-embedded-all</artifactId>
        </exclusion>

        <exclusion>
          <groupId>com.sun.net.httpserver</groupId>

          <artifactId>http</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>org.codehaus.jackson</groupId>

      <artifactId>jackson-core-asl</artifactId>

      <version>1.5.1</version>
    </dependency>

    <dependency>
      <groupId>org.codehaus.jackson</groupId>

      <artifactId>jackson-mapper-asl</artifactId>

      <version>1.5.1</version>
    </dependency>

    <dependency>
      <groupId>org.codehaus.jackson</groupId>

      <artifactId>jackson-jaxrs</artifactId>

      <version>1.5.1</version>
    </dependency>

    <dependency>
      <groupId>org.codehaus.jackson</groupId>

      <artifactId>jackson-xc</artifactId>

      <version>1.5.1</version>
    </dependency>

    <!-- end jersey -->

    <dependency>
      <groupId>org.mockito</groupId>

      <artifactId>mockito-all</artifactId>

      <version>1.8.1</version>
    </dependency>

    <!-- START selenium tests dependencies -->

    <dependency>
      <groupId>org.testng</groupId>

      <artifactId>testng</artifactId>

      <version>5.14</version>

      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.seleniumhq.selenium.client-drivers</groupId>

      <artifactId>selenium-java-client-driver</artifactId>

      <version>${selenium-client.version}</version>

      <scope>test</scope>
    </dependency>

    <!-- END selenium tests dependencies -->

    <dependency>
      <groupId>org.aspectj</groupId>

      <artifactId>aspectjrt</artifactId>

      <version>${aspectj.version}</version>
    </dependency>

    <dependency>
      <groupId>org.aspectj</groupId>

      <artifactId>aspectjweaver</artifactId>

      <version>${aspectj.version}</version>
    </dependency>
    
    <dependency>
		<groupId>org.owasp.esapi</groupId>
		<artifactId>esapi</artifactId>
		<version>2.1.0</version>
	</dependency>
  </dependencies>

  <reporting>
    <plugins>
      <plugin>
	<groupId>org.apache.maven.plugins</groupId>
	<artifactId>maven-javadoc-plugin</artifactId>
        <configuration>
           <docfilessubdirs>true</docfilessubdirs>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>

        <artifactId>maven-project-info-reports-plugin</artifactId>

        <version>2.4</version>

        <configuration>
          <!-- disable checking of url's im pom's -->

          <dependencyDetailsEnabled>false</dependencyDetailsEnabled>

          <dependencyLocationsEnabled>false</dependencyLocationsEnabled>
        </configuration>

        <reportSets>
          <reportSet>
            <reports>
              <report>javadoc</report>
            </reports>
          </reportSet>
        </reportSets>

      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>

        <artifactId>cobertura-maven-plugin</artifactId>

        <version>2.5.1</version>

        <configuration>
          <formats>
            <format>xml</format>
          </formats>
        </configuration>
      </plugin>
    </plugins>
  </reporting>
</project>
